#!/usr/bin/env bash
compat="$PGE_COMPAT_DIR"
slug="GloriousEggroll/proton-ge-custom"
version="0.1.1"

get_latest(){
    local url="https://api.github.com/repos/$slug/releases?per_page=1"
    curl -s "$url" | jq -r '.[] .tag_name'
}
news(){
    local url="https://api.github.com/repos/$slug/releases?per_page=1"
    local id=$(curl -s "$url" | jq -r '.[] .id')
    local news_url="https://api.github.com/repos/$slug/releases/$id"
    local res=$(curl -s "$news_url")
    echo
    <<< $res jq -r '.tag_name'
    <<< $res jq -r '.body'
    echo
}
get_current(){
    ls -1 $compat | sort -V | grep GE-Proton | tail -n1
}
dl(){
    local tb="$(get_latest).tar.gz"
    local dl="https://github.com/$slug/releases/download/$latest/$tb"
    wget $dl -O $compat/$tb &&
    tar xvf $compat/$tb -C $compat
    rm $compat/$tb
}
notify(){
    local current=$(get_current)
    local latest=$(get_latest)
    if [[ $current != $latest ]]; then
        echo "$latest"
        exit 1
    fi
    exit 0
}
info(){
    local current=$(get_current)
    local latest=$(get_latest)
    echo "PGE version: $version"
    echo -e "Current:     $current"
    echo -e "Latest:      $latest"
    if [[ $current != $latest ]]; then
        while true; do
            read -p "Local version out of date. Fetch latest? [Y/n] " resp
            case $resp in
                ""|y|Y)
                    update
                    ;;
                n|N)
                    exit 0
                    ;;
                *)
                    continue
                    ;;
            esac
        done
    fi
}
update(){
    local current=$(get_current)
    local latest=$(get_latest)
    if [[ $latest == $current ]]; then
        echo "Already up to date ($latest)"
    else
	    dl
    fi
}
list(){
    ls -1 $compat | sort -V | grep GE
}
usage(){
	cat <<- EOF

	    USAGE: pge <mode>
	    
	    info	list version info
	    list	list installed Proton-GE versions
	    update	download latest Proton-GE
	    jump	jump to compat tools dir
	    news	get latest release notes
    notify      print if upstream PGE has updates
	    remove	remove compat tool by index

	EOF
}
jump(){
    cd "$compat"
    $SHELL
}
remove(){
    readarray -t vers < <(list)
    for ((i=0;i<${#vers[@]};i++)); do
	    printf "%i  %s\n" $i "${vers[$i]}"
    done
    while true; do
        read -p "Remove index: " choice
        [[ -z $choice ]] && continue
        [[ ! $choice =~ ^[0-9]+$ ]] && continue
        [[ $choice -gt $((${#vers[@]}-1)) ]] && continue
        while true; do
                read -p "Remove '$compat/${vers[$choice]}'? [Y/n] " resp
                case $resp in
                ""|y|Y)
                    rm -rf "$compat/${vers[$choice]}"
                    echo "Removed ${vers[$choice]}"
                    exit 0
                    ;;
                n|N)
                    exit 0
                    ;;
                *)
                    continue
                    ;;
                esac
        done
        break
	done
}

[[ -z $PGE_COMPAT_DIR ]] && { echo "PGE_COMPAT_DIR not set"; exit 1; }
[[ $# -lt 1 ]] && { usage; exit 1; }

if [[ $(type -t $1) == function ]]; then
	$1
else
	usage
fi
